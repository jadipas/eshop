{"ast":null,"code":"export const initialState = {\n  basket: []\n};\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_BASKET':\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_BASKET':\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {} else {\n        console.warn(`Can`);\n      }\n\n      return { ...state,\n        basket: state.basket(item => item.id !== action.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Jordan/Desktop/eshop/src/reducer.js"],"names":["initialState","basket","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","index","findIndex","basketItem","id","newBasket","console","warn"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE;AADgB,CAArB;AAIP,OAAO,MAAMC,cAAc,GAAID,MAAD,IAC5BA,MAD4B,aAC5BA,MAD4B,uBAC5BA,MAAM,CAAEE,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADK;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHP,QAAAA,MAAM,EAAE,CAAC,GAAGO,KAAK,CAACP,MAAV,EAAkBQ,MAAM,CAACJ,IAAzB;AAFL,OAAP;;AAKJ,SAAK,oBAAL;AACI,YAAMM,KAAK,GAAGH,KAAK,CAACP,MAAN,CAAaW,SAAb,CACTC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBL,MAAM,CAACK,EAD/B,CAAd;AAGA,UAAIC,SAAS,GAAG,CAAC,GAAGP,KAAK,CAACP,MAAV,CAAhB;;AAEA,UAAGU,KAAK,IAAI,CAAZ,EAAc,CAEb,CAFD,MAEK;AACDK,QAAAA,OAAO,CAACC,IAAR,CAAc,KAAd;AACH;;AACD,aAAO,EACH,GAAGT,KADA;AAEHP,QAAAA,MAAM,EAAEO,KAAK,CAACP,MAAN,CAAaI,IAAI,IAAIA,IAAI,CAACS,EAAL,KAAYL,MAAM,CAACK,EAAxC;AAFL,OAAP;;AAIJ;AACI,aAAON,KAAP;AAvBR;AAyBH,CA3BD;;AA6BA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    basket: [],\r\n}\r\n\r\nexport const getBasketTotal = (basket) => \r\n  basket?.reduce((amount, item) => item.price + amount, 0);\r\n  \r\nconst reducer = (state, action) => {\r\n    \r\n    switch(action.type){\r\n        case 'ADD_TO_BASKET':\r\n            return {\r\n                ...state,\r\n                basket: [...state.basket, action.item],\r\n            };\r\n        \r\n        case 'REMOVE_FROM_BASKET':\r\n            const index = state.basket.findIndex(\r\n                (basketItem) => basketItem.id === action.id\r\n            );\r\n            let newBasket = [...state.basket]\r\n\r\n            if(index >= 0){\r\n\r\n            }else{\r\n                console.warn(`Can`)\r\n            }\r\n            return {\r\n                ...state,\r\n                basket: state.basket(item => item.id !== action.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}